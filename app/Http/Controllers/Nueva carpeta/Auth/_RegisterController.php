<?phpnamespace App\Http\Controllers\Auth;use App\Http\Controllers\Api\V2\FileUploadController;use App\Http\Controllers\Controller;use App\Http\Controllers\Mensajeria\WhatsAppController;use App\Http\Requests\Auth\RegisterRequest;use App\Http\Requests\Auth\SellerRequest;use App\Models\Address;use App\Models\CategoryTranslation;use App\Models\Shop;use App\Models\User;use App\Models\Workshop;use App\Models\WorkshopCategory;use Auth;use Illuminate\Http\Request;use Illuminate\Support\Facades\Hash;use Str;class RegisterController extends Controller {    public function showRegistrationForm() {        return view('auth.register');    }    public function sellerView() {        return view('frontend.registro-comercio.views.business.index', ['categories' => $categories = CategoryTranslation::all()]);    }    public function workshopView() {        return view('frontend.registro-comercio.views.workshops.index', ['categories' => $categories = WorkshopCategory::all()]);    }    public function registerCustomer(RegisterRequest $request) {        // Revisar si tiene un proceso abierto        $opened = User::where('email', $request->input('email'))            ->where(function ($query) {                $query->whereNull('email_verified_at')                    ->orWhereNull('phone_verified_at')                    ->orWhereNull('correo_verified_at');            })->exists();        if ($opened) {            $user = User::where('email', $request->input('email'))->first();            $verificationCode = str_pad(rand(0, 999999), 6, '0', STR_PAD_LEFT);            $confirmationCode = Str::random(25);            $user->addresses()->delete();            $data = $request->all();            $data['add_user_type'] = null;            $data['user_type'] = 'customer';            $data['name'] = $request->input('name_user');            $this->retakeUserProfile($verificationCode, $data, $confirmationCode, $request, $user);            // Envia el codigo de verificación por WhatsApp            (new WhatsAppController)->sendVerificationMessage($user);            Auth::login($user);            return redirect()->route('dashboard');        }        // Crear nuevo customer        $user = $this->createUser($request);        // Envia el codigo de verificacion de whatsapp        (new WhatsAppController)->sendVerificationMessage($user);        // Logea al nuevo customer        Auth::login($user);        // Redirecciona a la verificacion de telefono        return redirect()->route('shop.view.phone.verification');    }    private function createUser(Request $request, string $type = 'customer', bool $is_workshop = false): User {        $verificationCode = str_pad(rand(0, 999999), 6, '0', STR_PAD_LEFT);        $confirmationCode = Str::random(25);        $user = User::make([            'name' => $request->name_user,            'email' => $request->email,            'phone' => $request->phone,            'password' => Hash::make($request->password),            'user_type' => $type,            'confirmation_code' => $confirmationCode,            'verification_code' => $verificationCode,        ]);        if ($type == 'seller' && !$is_workshop) {            $user->category_translation_id = $request->input('categories_id');            $user->cedula = str_replace('-', '', $request->input('cedula_input'));        }        if ($type == 'seller' && $is_workshop) {            $user->add_user_type = 'workshop';        }        $user->save();;        return $user;    }    public function registerSeller(SellerRequest $request) {//        $request->validated();        if(!$request->has('is_physical_person')){            if(!$request->hasFile('registro_mercantil')){                return back()->with('error', 'Debes proporcionar tu registro mercantil');            }        }        // Revisar si tiene un proceso abierto        if($this->restartSeller($request)) return redirect()->route('seller.dashboard');        // Crear nuevo seller        $user = $this->createUser($request, 'seller');        $user->update([            'cedula_id' => FileUploadController::uploadImage($request, 'cedula_photo', $user)        ]);        // Crea la tienda asociada al nuevo seller        $this->createStore($request, $user);        // Crea la direccion princial del seller        $this->createAddress($request, $user);        // Envia el codigo de verificacion de whatsapp        (new WhatsAppController)->sendVerificationMessage($user);        // Logea al nuevo seller        Auth::login($user);        // Redirecciona a la verificacion de telefono        return redirect()->route('shop.view.phone.verification');    }    private function createStore(Request $request, User $user): void {        $shop = Shop::create([            'user_id' => $user->id,            'name' => $request->name,            'slug' => Str::slug($request->name),            'rnc' => str_replace('-','', $request->input('rnc_input')),            'rnc_id' => FileUploadController::uploadImage($request, 'registro_mercantil', $user)        ]);    }    private function createAddress(Request $request, User $user): void {        Address::create([            'user_id' => $user->id,            'address' => $request->address,            'country' => $request->country,            'city' => $request->city,            'state' => $request->state,            'postalCode' => $request->postalCode,            'latitude' => $request->latitude,            'longitude' => $request->longitude,            'set_default' => 1        ]);    }    public function registerWorkshop(SellerRequest $request) {        $request->validated();        // Revisar si tiene un proceso abierto        $opened = User::where('email', $request->input('email'))            ->where(function ($query) {                $query->whereNull('email_verified_at')                    ->orWhereNull('phone_verified_at')                    ->orWhereNull('correo_verified_at');            })->exists();        if ($opened) {            $user = User::where('email', $request->input('email'))->first();            $verificationCode = str_pad(rand(0, 999999), 6, '0', STR_PAD_LEFT);            $confirmationCode = Str::random(25);            $user->addresses()->delete();            $data = $request->all();            $data['user_type'] = 'seller';            $data['add_user_type'] = 'workshop';            $data['name'] = $request->input('name_user');            $this->retakeUserProfile($verificationCode, $data, $confirmationCode, $request, $user);            // Crea un nuevo taller asociado al seller            $this->createWorkshop($request, $user);            // Crea la nueva tienda asociada al seller            $this->createStore($request, $user);            // Crea la direccion princial del seller            $this->createAddress($request, $user);            // Envia el codigo de verificación por WhatsApp            (new WhatsAppController)->sendVerificationMessage($user);            Auth::login($user);            return redirect()->route('workshop.dashboard');        }        // Crea el nuevo usuario seller asociado a workshop        $user = $this->createUser($request, 'seller', true);        // Crea un nuevo taller asociado al seller        $this->createWorkshop($request, $user);        // Crea la nueva tienda asociada al seller        $this->createStore($request, $user);        // Crea la nueva direccion asociada al seller        $this->createAddress($request, $user);        // Envia el codigo de verificación por WhatsApp        (new WhatsAppController)->sendVerificationMessage($user);        // Logea al nuevo seller        Auth::login($user);        // Redirecciona a la verificacion de telefono        return redirect()->route('shop.view.phone.verification');    }    private function createWorkshop(Request $request, User $user) {        $workshop = Workshop::create([            'name' => $request->input('name'),            'user_id' => $user->id,            'delivery_pickup_latitude' => $request->latitude,            'delivery_pickup_longitude' => $request->longitude        ]);        $workshop->categories()->sync($request->categories_id);    }    private function retakeUserProfile(string $verificationCode, array $data, string $confirmationCode, RegisterRequest | SellerRequest $request, User $user): void {        $data['verification_code'] = $verificationCode;        $data['confirmation_code'] = $confirmationCode;        $data['email_verified_at'] = null;        $data['phone_verified_at'] = null;        $data['correo_verified_at'] = null;        $data['category_translation_id'] = $request->input('categories_id') ?? null;        $data['password'] = bcrypt($request->input('password'));        $data['cedula'] = str_replace('-', '', $request->input('cedula_input'));        $user->workshop()->delete();        $user->shop()->delete();        $user->update($data);    }    private function restartSeller(SellerRequest $request) : bool {        $opened = User::where('email', $request->input('email'))            ->where(function ($query) {                $query->whereNull('email_verified_at')                    ->orWhereNull('phone_verified_at')                    ->orWhereNull('correo_verified_at');            })->exists();        if ($opened) {            $user = User::where('email', $request->input('email'))->first();            $verificationCode = str_pad(rand(0, 999999), 6, '0', STR_PAD_LEFT);            $confirmationCode = Str::random(25);            $user->addresses()->delete();            $data = $request->all();            $data['add_user_type'] = null;            $data['user_type'] = 'seller';            $data['name'] = $request->input('name_user');            $this->retakeUserProfile($verificationCode, $data, $confirmationCode, $request, $user);            //Delete the old seller cedule and rnc picture            FileUploadController::deleteImage($user->cedula_id);            if($user->rnc_id) FileUploadController::deleteImage($user->rnc_id);            //resave the seller cedule picture            $user->update([                'cedula_id' => FileUploadController::uploadImage($request, 'cedula_photo', $user),            ]);            // Crea la nueva tienda asociada al seller            $this->createStore($request, $user);            // Crea la direccion princial del seller            $this->createAddress($request, $user);            // Envia el codigo de verificación por WhatsApp            (new WhatsAppController)->sendVerificationMessage($user);            Auth::login($user);            return true;        }        return false;    }}