// Startiing body of request
const requestEstimateOrderOptions = {
    referenceId: "Client Internal Reference",
    isTest: window.Laravel.isTest,
    items: [],
    waypoints: [],
};
let pedidosYaQuotes = [];
/**
 * make request to fetch
 *
 * @param {array} products Products from DOM
 */

const makeRequest = async (products) => {
    for (const product of products) {
        requestEstimateOrderOptions.items = [];
        requestEstimateOrderOptions.waypoints =
            requestEstimateOrderOptions.waypoints.filter(
                (point) => point.type !== "PICK_UP",
            );
        try {
            const actuallyProduct = product.dataset.product
                ? JSON.parse(product.dataset.product)
                : {};
            actuallyProduct.quantity = JSON.parse(product.dataset.quantity);
            // Add product to request body
            addProductToRequest(actuallyProduct, product);
            // Add pickup address point to request body
            addPickupAddress(
                product.dataset.address
                    ? JSON.parse(product.dataset.address)
                    : null,
                product.dataset.seller
                    ? JSON.parse(product.dataset.seller)
                    : null,
            );
            // Haz la solicitud
            const response = await Promise.race([
                requestQuote(requestEstimateOrderOptions),
                new Promise((_, reject) =>
                    setTimeout(() => reject(new Error("Timeout")), 5000),
                ),
            ]);
            let json;
            if (response) {
                try {
                    // Si la respuesta es un objeto Response, usa .json() para obtener la respuesta como JSON
                    json = await response.json();
                } catch (err) {
                    console.error(
                        "Error al analizar la respuesta de la API:",
                        err,
                    );
                }
            }
            if (json) {
                // Guarda la respuesta
                const cuote = pedidosYaQuotes[0];
                // Muestra las cotizaciones en el DOM
                loadQuotes(null);
            }
        } catch (err) {
            console.error("Error en la API: " + err);
        }
    }
};
/**
 * Load quotes to DOM
 *
 * @param {object} quote quote generated by the API
 * @returns {void}
 */
const loadQuotes = (quote) => {};
/**
 * Request an API to get quotes
 *
 * @param {object} data Body to the request
 */
const requestQuote = async (data) => {
    const test = {
        referenceId: "Client Internal Reference",
        isTest: window.Laravel.isTest,
        notificationMail: "email@email.com",
        items: [
            {
                type: "STANDARD",
                value: 1250.6,
                description: "Some book.",
                sku: "ABC123",
                quantity: 1,
                volume: 10.01,
                weight: 0.5,
            },
            {
                type: "STANDARD",
                value: 250,
                description: "T-Shirt",
                sku: "ABC124",
                quantity: 1,
                volume: 10.01,
                weight: 0.3,
            },
        ],
        waypoints: [
            {
                type: "PICK_UP",
                addressStreet: "AmÃ©rico Lugo 1",
                addressAdditional: "",
                city: "Villa Juana",
                latitude: 18.491053817554125,
                longitude: -69.9038373214921,
                phone: "+59898765432",
                name: "Oficina Ciudad Vieja",
                instructions: "El ascensor esta roto.",
            },
            {
                type: "DROP_OFF",
                latitude: 18.492431995217228,
                longitude: -69.90759888308494,
                addressStreet: "Marcos Ruiz 118",
                addressAdditional: "",
                city: "Villa Juana",
                phone: "+59812345678",
                name: "Agustin",
                instructions: "Entregar en mano",
            },
        ],
    };
    return fetch("https://courier-api.pedidosya.com/v3/shippings/estimates", {
        method: "POST",
        headers: {
            "control-access-allow-origin": "*",
            "content-type": "application/json",
            accept: "application/json",
            authorization:
                "Bearer 7602-151315-83b1a479-83c2-405e-453d-dbd39e9afadd",
        },
        body: JSON.stringify(test),
    })
        .then((response) => console.log(response)) // res => res.json()
        .catch((err) => console.error("Error al enviar la solicitud: " + err));
    // pedidosYaQuotes.push([...json.deliveryOffers])
};
/**
 *  Add dropoff address point to request body
 *
 * @param {Element} addressInput Address input from DOM
 */
const addDropOffAddress = (addressInput) => {
    try {
        const { address, city, latitude, longitude, phone } = addressInput
            .dataset.dropoffAddress
            ? JSON.parse(addressInput.dataset.dropoffAddress)
            : {};
        const { name } = addressInput.dataset.userInfo
            ? JSON.parse(addressInput.dataset.userInfo)
            : {};
        const dropoff = {
            type: "DROP_OFF",
            latitude: latitude,
            longitude: longitude,
            addressStreet: address,
            addressAdditional: "",
            city: city,
            phone: phone,
            name: name,
            instructions: "Entregar en mano",
        };
        requestEstimateOrderOptions.waypoints.push(dropoff);
    } catch (err) {
        console.error("Possible JSON null: " + err);
    }
};
/**
 *  Add pickup address point to request body
 *
 * @param {object} address Address of the seller
 * @param {object} seller Seller data
 */
const addPickupAddress = (a, seller) => {
    const { address, city, latitude, longitude, phone } = a;
    const { name } = seller;
    const pickup = {
        type: "PICK_UP",
        addressStreet: address,
        addressAdditional: "",
        city: city,
        latitude: latitude,
        longitude: longitude,
        phone: phone,
        name: name,
        instructions: "El ascensor esta roto.",
    };
    requestEstimateOrderOptions.waypoints.push(pickup);
};
/**
 *  Add product to request body
 *
 * @param {object} product
 */
const addProductToRequest = (product, noParsedProduct) => {
    const weight = calcWeightForProduct(product);
    const { name, unit_price, quantity } = product;
    address = JSON.parse(noParsedProduct.dataset.address);
    const volume = calcVolumeForProduct(noParsedProduct);
    const customerAddress = document.querySelector("#addresses-data");
    if (weight > 20.0 || volume > 80840.0) {
        return false;
    }
    // Validate if the pickup and dropoff address are in Santo Domingo
    if (
        !availablePedidosYaAreas.includes(address.city) ||
        !availablePedidosYaAreas.includes(
            JSON.parse(customerAddress.dataset.dropoffAddress).city,
        )
    ) {
        return false;
    }
    requestEstimateOrderOptions.items.push({
        type: "STANDARD",
        value: unit_price,
        description: name.trim(),
        quantity: quantity,
        volume: volume,
        weight: weight,
    });
};
